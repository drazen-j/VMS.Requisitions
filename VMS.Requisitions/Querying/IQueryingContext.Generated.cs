//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Entity Developer tool using EF Core template.
// -----------------------------------------------------------------------------
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace VMS.Requisitions.Querying
{
  using System.Collections.Generic;

  using Microsoft.EntityFrameworkCore;      
  using Microsoft.EntityFrameworkCore.ChangeTracking;
  using Microsoft.EntityFrameworkCore.Infrastructure;
  using System.Threading;
  using System.Threading.Tasks;
    
  using VMS.Requisitions.Querying.Entities;

  /// <summary>
  /// The QueryingContext interface.
  /// </summary>
  public partial interface IQueryingContext
  {
        /// <summary>
        /// Gets or sets the ActiveCandidatesCounts.
        /// </summary>
        DbSet<ActiveCandidatesCount> ActiveCandidatesCounts {get; set;}

        /// <summary>
        /// Gets or sets the Approvals.
        /// </summary>
        DbSet<Approval> Approvals {get; set;}

        /// <summary>
        /// Gets or sets the ApprovalProcesses.
        /// </summary>
        DbSet<ApprovalProcess> ApprovalProcesses {get; set;}

        /// <summary>
        /// Gets or sets the AttachmentsCounts.
        /// </summary>
        DbSet<AttachmentsCount> AttachmentsCounts {get; set;}

        /// <summary>
        /// Gets or sets the Candidates.
        /// </summary>
        DbSet<Candidate> Candidates {get; set;}

        /// <summary>
        /// Gets or sets the ClientTiers.
        /// </summary>
        DbSet<ClientTier> ClientTiers {get; set;}

        /// <summary>
        /// Gets or sets the Locations.
        /// </summary>
        DbSet<Location> Locations {get; set;}

        /// <summary>
        /// Gets or sets the Organizations.
        /// </summary>
        DbSet<Organization> Organizations {get; set;}

        /// <summary>
        /// Gets or sets the OrganizationDetails.
        /// </summary>
        DbSet<OrganizationDetail> OrganizationDetails {get; set;}

        /// <summary>
        /// Gets or sets the ReportsToContacts.
        /// </summary>
        DbSet<ReportsToContact> ReportsToContacts {get; set;}

        /// <summary>
        /// Gets or sets the Requisitions.
        /// </summary>
        DbSet<Requisition> Requisitions {get; set;}

        /// <summary>
        /// Gets or sets the RequisitionAttachments.
        /// </summary>
        DbSet<RequisitionAttachment> RequisitionAttachments {get; set;}

        /// <summary>
        /// Gets or sets the RequisitionClasses.
        /// </summary>
        DbSet<RequisitionClass> RequisitionClasses {get; set;}

        /// <summary>
        /// Gets or sets the RequisitionContacts.
        /// </summary>
        DbSet<RequisitionContact> RequisitionContacts {get; set;}

        /// <summary>
        /// Gets or sets the RequisitionCostCenters.
        /// </summary>
        DbSet<RequisitionCostCenter> RequisitionCostCenters {get; set;}

        /// <summary>
        /// Gets or sets the RequisitionGeneralLedgers.
        /// </summary>
        DbSet<RequisitionGeneralLedger> RequisitionGeneralLedgers {get; set;}

        /// <summary>
        /// Gets or sets the RequisitionNextApprovers.
        /// </summary>
        DbSet<RequisitionNextApprover> RequisitionNextApprovers {get; set;}

        /// <summary>
        /// Gets or sets the RequisitionProjects.
        /// </summary>
        DbSet<RequisitionProject> RequisitionProjects {get; set;}

        /// <summary>
        /// Gets or sets the StatusDescriptions.
        /// </summary>
        DbSet<StatusDescription> StatusDescriptions {get; set;}

        /// <summary>
        /// Gets or sets the UserApprovalData.
        /// </summary>
        DbSet<UserApprovalData> UserApprovalData {get; set;}

        /// <summary>
        /// Gets the database.
        /// </summary>
        DatabaseFacade Database { get; }

        /// <summary>
        /// Gets the change tracker.
        /// </summary>
        ChangeTracker ChangeTracker { get; }
        
        /// <summary>
        /// The save changes.
        /// </summary>
        /// <returns>
        /// The <see cref="int"/>.
        /// </returns>
        int SaveChanges();

        /// <summary>
        /// The save changes.
        /// </summary>
        /// <param name="acceptAllChangesOnSuccess">
        /// The accept all changes on success.
        /// </param>
        /// <returns>
        /// The <see cref="int"/>.
        /// </returns>
        int SaveChanges(bool acceptAllChangesOnSuccess);

        /// <summary>
        /// Asynchronously saves all pending changes to the database.
        /// </summary>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken" /> to observe while waiting for the task to complete.
        /// </param>
        /// <returns>
        /// A <see cref="Task"/> that represents the asynchronous operation.
        /// The task result contains the <see cref="int" /> number of database rows affected.
        /// </returns>
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Asynchronously saves all pending changes to the database.
        /// </summary>
        /// <param name="acceptAllChangesOnSuccess">
        /// The accept all changes on success.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken" /> to observe while waiting for the task to complete.
        /// </param>
        /// <returns>
        /// A <see cref="Task"/> that represents the asynchronous operation.
        /// The task result contains the <see cref="int" /> number of database rows affected.
        /// </returns>
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The update.
        /// </summary>
        /// <param name="entity">
        /// The entity.
        /// </param>
        /// <typeparam name="TEntity">
        /// Type of entity.
        /// </typeparam>
        /// <returns>
        /// The <see cref="EntityEntry"/>.
        /// </returns>
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;

        /// <summary>
        /// The update.
        /// </summary>
        /// <param name="entity">
        /// The entity.
        /// </param>
        /// <returns>
        /// The <see cref="EntityEntry"/>.
        /// </returns>
        EntityEntry Update(object entity);

        /// <summary>
        /// The update range.
        /// </summary>
        /// <param name="entities">
        /// The entities.
        /// </param>
        void UpdateRange(params object[] entities);

        /// <summary>
        /// The update range.
        /// </summary>
        /// <param name="entities">
        /// The entities.
        /// </param>
        void UpdateRange(IEnumerable<object> entities);
  }
}
