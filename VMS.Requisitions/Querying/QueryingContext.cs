//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Entity Developer tool using EF Core template.
// -----------------------------------------------------------------------------
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using VMS.Requisitions.Querying.Entities;



namespace VMS.Requisitions.Querying
{

    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class QueryingContext : DbContext, IQueryingContext
    {

        public QueryingContext() :
            base()
        {
            OnCreated();
        }

        public QueryingContext(DbContextOptions<QueryingContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<ActiveCandidatesCount> ActiveCandidatesCounts
        {
            get;
            set;
        }

        public virtual DbSet<Approval> Approvals
        {
            get;
            set;
        }

        public virtual DbSet<ApprovalProcess> ApprovalProcesses
        {
            get;
            set;
        }

        public virtual DbSet<AttachmentsCount> AttachmentsCounts
        {
            get;
            set;
        }

        public virtual DbSet<Candidate> Candidates
        {
            get;
            set;
        }

        public virtual DbSet<ClientTier> ClientTiers
        {
            get;
            set;
        }

        public virtual DbSet<Location> Locations
        {
            get;
            set;
        }

        public virtual DbSet<Organization> Organizations
        {
            get;
            set;
        }

        public virtual DbSet<OrganizationDetail> OrganizationDetails
        {
            get;
            set;
        }

        public virtual DbSet<ReportsToContact> ReportsToContacts
        {
            get;
            set;
        }

        public virtual DbSet<Requisition> Requisitions
        {
            get;
            set;
        }

        public virtual DbSet<RequisitionAttachment> RequisitionAttachments
        {
            get;
            set;
        }

        public virtual DbSet<RequisitionClass> RequisitionClasses
        {
            get;
            set;
        }

        public virtual DbSet<RequisitionContact> RequisitionContacts
        {
            get;
            set;
        }

        public virtual DbSet<RequisitionCostCenter> RequisitionCostCenters
        {
            get;
            set;
        }

        public virtual DbSet<RequisitionGeneralLedger> RequisitionGeneralLedgers
        {
            get;
            set;
        }

        public virtual DbSet<RequisitionNextApprover> RequisitionNextApprovers
        {
            get;
            set;
        }

        public virtual DbSet<RequisitionProject> RequisitionProjects
        {
            get;
            set;
        }

        public virtual DbSet<StatusDescription> StatusDescriptions
        {
            get;
            set;
        }

        public virtual DbSet<UserApprovalData> UserApprovalData
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.RequisitionMapping(modelBuilder);
            this.CustomizeRequisitionMapping(modelBuilder);

            this.RequisitionProjectMapping(modelBuilder);
            this.CustomizeRequisitionProjectMapping(modelBuilder);

            this.RequisitionGeneralLedgerMapping(modelBuilder);
            this.CustomizeRequisitionGeneralLedgerMapping(modelBuilder);

            this.RequisitionCostCenterMapping(modelBuilder);
            this.CustomizeRequisitionCostCenterMapping(modelBuilder);

            this.ClientTierMapping(modelBuilder);
            this.CustomizeClientTierMapping(modelBuilder);

            this.LocationMapping(modelBuilder);
            this.CustomizeLocationMapping(modelBuilder);

            this.OrganizationMapping(modelBuilder);
            this.CustomizeOrganizationMapping(modelBuilder);

            this.CandidateMapping(modelBuilder);
            this.CustomizeCandidateMapping(modelBuilder);

            this.RequisitionAttachmentMapping(modelBuilder);
            this.CustomizeRequisitionAttachmentMapping(modelBuilder);

            this.OrganizationDetailMapping(modelBuilder);
            this.CustomizeOrganizationDetailMapping(modelBuilder);

            this.RequisitionClassMapping(modelBuilder);
            this.CustomizeRequisitionClassMapping(modelBuilder);

            this.RequisitionContactMapping(modelBuilder);
            this.CustomizeRequisitionContactMapping(modelBuilder);

            this.ApprovalMapping(modelBuilder);
            this.CustomizeApprovalMapping(modelBuilder);

            this.ApprovalProcessMapping(modelBuilder);
            this.CustomizeApprovalProcessMapping(modelBuilder);

            this.UserApprovalDataMapping(modelBuilder);
            this.CustomizeUserApprovalDataMapping(modelBuilder);

            this.RequisitionNextApproverMapping(modelBuilder);
            this.CustomizeRequisitionNextApproverMapping(modelBuilder);

            this.ReportsToContactMapping(modelBuilder);
            this.CustomizeReportsToContactMapping(modelBuilder);

            this.ActiveCandidatesCountMapping(modelBuilder);
            this.CustomizeActiveCandidatesCountMapping(modelBuilder);

            this.AttachmentsCountMapping(modelBuilder);
            this.CustomizeAttachmentsCountMapping(modelBuilder);

            this.StatusDescriptionMapping(modelBuilder);
            this.CustomizeStatusDescriptionMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region Requisition Mapping

        private void RequisitionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Requisition>().ToTable(@"REQ", @"dbo");
            modelBuilder.Entity<Requisition>().Property<int>(x => x.Id).HasColumnName(@"Req_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Requisition>().Property<int>(x => x.OrganizationId).HasColumnName(@"Org_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<string>(x => x.InternalNumber).HasColumnName(@"Int_Nb_Val").HasColumnType(@"nvarchar(254)").ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<Requisition>().Property<string>(x => x.AccountInfo).HasColumnName(@"Acct_Info_Tx").HasColumnType(@"nvarchar(254)").ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<Requisition>().Property<string>(x => x.DepartmentName).HasColumnName(@"Dept_Nm").HasColumnType(@"nvarchar(254)").ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<Requisition>().Property<string>(x => x.ProjectName).HasColumnName(@"Proj_Nm").HasColumnType(@"nvarchar(254)").ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<Requisition>().Property<string>(x => x.Title).HasColumnName(@"Title_Nm").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<Requisition>().Property<int>(x => x.NumberOfOpenings).HasColumnName(@"Nb_Pstn_Nb").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<int>(x => x.NumberOfFilled).HasColumnName(@"Nb_Pstn_Fill_Nb").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<int>>(x => x.ContractTierId).HasColumnName(@"Cont_Tier_Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<System.DateTime>>(x => x.OpenUntil).HasColumnName(@"Cls_Dt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<System.DateTime>>(x => x.StartDate).HasColumnName(@"Strt_Dt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<System.DateTime>>(x => x.EndDate).HasColumnName(@"End_Dt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<int>>(x => x.RequisitionStatusId).HasColumnName(@"Req_Sts_Cd").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<int>>(x => x.RequisitionClassId).HasColumnName(@"Req_Cls_Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<System.DateTime>>(x => x.CreatedDate).HasColumnName(@"Crtd_Dt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<int>>(x => x.LocationId).HasColumnName(@"Location_Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<bool>(x => x.IsSalariedContractor).HasColumnName(@"Salaried_Contractor_Fg").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Requisition>().Property<bool>(x => x.IsSowRequisition).HasColumnName(@"Tp_Proj_Fg").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Requisition>().Property<System.Nullable<bool>>(x => x.IsTemplate).HasColumnName(@"Is_Template").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().Property<System.Nullable<int>>(x => x.MaximumSubmittalsByVendor).HasColumnName(@"Max_Submittals_By_Vendor").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Requisition>().HasKey(@"Id");
        }
	
        partial void CustomizeRequisitionMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region RequisitionProject Mapping

        private void RequisitionProjectMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RequisitionProject>().ToTable(@"vw_RequisitionsContext_RequisitionProjects", @"dbo");
            modelBuilder.Entity<RequisitionProject>().Property<int>(@"RequisitionId").HasColumnName(@"RequisitionId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionProject>().Property<int>(x => x.Id).HasColumnName(@"ProjectId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionProject>().Property<string>(x => x.Name).HasColumnName(@"ProjectName").HasColumnType(@"nvarchar(125)").ValueGeneratedNever().HasMaxLength(125);
            modelBuilder.Entity<RequisitionProject>().HasKey(@"RequisitionId", @"Id");
        }
	
        partial void CustomizeRequisitionProjectMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region RequisitionGeneralLedger Mapping

        private void RequisitionGeneralLedgerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RequisitionGeneralLedger>().ToTable(@"vw_RequisitionsContext_RequisitionGeneralLedgers", @"dbo");
            modelBuilder.Entity<RequisitionGeneralLedger>().Property<int>(@"RequisitionId").HasColumnName(@"RequisitionId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionGeneralLedger>().Property<int>(x => x.Id).HasColumnName(@"GeneralLedgerId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionGeneralLedger>().Property<string>(x => x.Name).HasColumnName(@"GeneralLedgerName").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<RequisitionGeneralLedger>().HasKey(@"RequisitionId", @"Id");
        }
	
        partial void CustomizeRequisitionGeneralLedgerMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region RequisitionCostCenter Mapping

        private void RequisitionCostCenterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RequisitionCostCenter>().ToTable(@"vw_RequisitionsContext_RequisitionCostCenters", @"dbo");
            modelBuilder.Entity<RequisitionCostCenter>().Property<int>(@"RequisitionId").HasColumnName(@"RequisitionId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionCostCenter>().Property<int>(x => x.Id).HasColumnName(@"CostCenterId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionCostCenter>().Property<string>(x => x.Name).HasColumnName(@"CostCenterName").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<RequisitionCostCenter>().HasKey(@"RequisitionId", @"Id");
        }
	
        partial void CustomizeRequisitionCostCenterMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region ClientTier Mapping

        private void ClientTierMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ClientTier>().ToTable(@"CLNT_TIER", @"dbo");
            modelBuilder.Entity<ClientTier>().Property<int>(x => x.Id).HasColumnName(@"Clnt_Tier_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ClientTier>().Property<string>(x => x.Name).HasColumnName(@"Tier_Tx").HasColumnType(@"nvarchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<ClientTier>().HasKey(@"Id");
        }
	
        partial void CustomizeClientTierMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Location Mapping

        private void LocationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Location>().ToTable(@"LOCATION", @"dbo");
            modelBuilder.Entity<Location>().Property<int>(x => x.Id).HasColumnName(@"Location_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Location>().Property<string>(x => x.Name).HasColumnName(@"Location_Nm").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<Location>().HasKey(@"Id");
        }
	
        partial void CustomizeLocationMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Organization Mapping

        private void OrganizationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Organization>().ToTable(@"ORG", @"dbo");
            modelBuilder.Entity<Organization>().Property<int>(x => x.Id).HasColumnName(@"Org_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Organization>().Property<int>(x => x.OrganizationTypeId).HasColumnName(@"s_Org_Tp_Cd").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Organization>().Property<string>(x => x.Name).HasColumnName(@"Org_Nm").HasColumnType(@"nvarchar(120)").IsRequired().ValueGeneratedNever().HasMaxLength(120);
            modelBuilder.Entity<Organization>().Property<string>(x => x.ShortName).HasColumnName(@"Org_Sh_Nm").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Organization>().HasKey(@"Id");
        }
	
        partial void CustomizeOrganizationMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Candidate Mapping

        private void CandidateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Candidate>().ToTable(@"CAND", @"dbo");
            modelBuilder.Entity<Candidate>().Property<int>(x => x.Id).HasColumnName(@"Cand_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Candidate>().Property<int>(x => x.ParentCandidateId).HasColumnName(@"Prnt_Cand_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Candidate>().Property<System.Nullable<int>>(x => x.RequisitionId).HasColumnName(@"Req_Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Candidate>().Property<System.Nullable<int>>(x => x.ClientCandidateStatusId).HasColumnName(@"Clnt_Cand_Sts_Cd").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Candidate>().HasKey(@"Id");
        }
	
        partial void CustomizeCandidateMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region RequisitionAttachment Mapping

        private void RequisitionAttachmentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RequisitionAttachment>().ToTable(@"REQ_ATCH", @"dbo");
            modelBuilder.Entity<RequisitionAttachment>().Property<int>(x => x.RequisitionId).HasColumnName(@"Req_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionAttachment>().Property<int>(x => x.AttachmentId).HasColumnName(@"Atch_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionAttachment>().HasKey(@"RequisitionId", @"AttachmentId");
        }
	
        partial void CustomizeRequisitionAttachmentMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region OrganizationDetail Mapping

        private void OrganizationDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OrganizationDetail>().ToTable(@"CLNT_DTL", @"dbo");
            modelBuilder.Entity<OrganizationDetail>().Property<int>(x => x.Id).HasColumnName(@"Clnt_Dtl_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<OrganizationDetail>().Property<int>(x => x.OrganizationId).HasColumnName(@"Org_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<OrganizationDetail>().Property<bool>(x => x.IsApprovalRequiredBeforeRequisitionDistribution).HasColumnName(@"Req_Appr_Dist_Fg").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<OrganizationDetail>().HasKey(@"Id");
        }
	
        partial void CustomizeOrganizationDetailMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region RequisitionClass Mapping

        private void RequisitionClassMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RequisitionClass>().ToTable(@"REQ_CLS", @"dbo");
            modelBuilder.Entity<RequisitionClass>().Property<int>(x => x.Id).HasColumnName(@"Req_Cls_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<RequisitionClass>().Property<string>(x => x.Description).HasColumnName(@"Req_Cls_Dc").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<RequisitionClass>().HasKey(@"Id");
        }
	
        partial void CustomizeRequisitionClassMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region RequisitionContact Mapping

        private void RequisitionContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RequisitionContact>().ToTable(@"vw_RequisitionsContext_RequisitionContacts", @"dbo");
            modelBuilder.Entity<RequisitionContact>().Property<int>(x => x.RequisitionId).HasColumnName(@"RequisitionId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionContact>().Property<VMS.Requisitions.Querying.Entities.RequisitionContactRole>(x => x.ContactRoleId).HasColumnName(@"ContactRoleId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionContact>().Property<int>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionContact>().Property<string>(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<RequisitionContact>().Property<string>(x => x.MiddleInitial).HasColumnName(@"MiddleInitial").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<RequisitionContact>().Property<string>(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<RequisitionContact>().Property<string>(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType(@"nvarchar(254)").ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<RequisitionContact>().HasKey(@"RequisitionId", @"ContactRoleId");
        }
	
        partial void CustomizeRequisitionContactMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Approval Mapping

        private void ApprovalMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Approval>().ToTable(@"APVL", @"dbo");
            modelBuilder.Entity<Approval>().Property<int>(x => x.Id).HasColumnName(@"Apvl_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Approval>().Property<int>(x => x.ApprovalProcessId).HasColumnName(@"Apvl_Process_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Approval>().Property<int>(x => x.UserId).HasColumnName(@"Usr_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Approval>().Property<int>(x => x.ApprovalStatusId).HasColumnName(@"Apvl_Sts_Cd").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Approval>().HasKey(@"Id");
        }
	
        partial void CustomizeApprovalMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region ApprovalProcess Mapping

        private void ApprovalProcessMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApprovalProcess>().ToTable(@"APVL_PROCESS", @"dbo");
            modelBuilder.Entity<ApprovalProcess>().Property<int>(x => x.Id).HasColumnName(@"Apvl_Process_Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ApprovalProcess>().Property<int>(x => x.EntityId).HasColumnName(@"Entity_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ApprovalProcess>().Property<int>(x => x.EntityTpCd).HasColumnName(@"Entity_Tp_Cd").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ApprovalProcess>().HasKey(@"Id");
        }
	
        partial void CustomizeApprovalProcessMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region UserApprovalData Mapping

        private void UserApprovalDataMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserApprovalData>().ToTable(@"User_Approval_Data", @"dbo");
            modelBuilder.Entity<UserApprovalData>().Property<int>(x => x.Id).HasColumnName(@"User_ID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserApprovalData>().Property<System.Nullable<int>>(x => x.AlternateApproverId).HasColumnName(@"Alternate_Approver_ID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<UserApprovalData>().Property<int>(x => x.OrganizationId).HasColumnName(@"Org_Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserApprovalData>().HasKey(@"Id");
        }
	
        partial void CustomizeUserApprovalDataMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region RequisitionNextApprover Mapping

        private void RequisitionNextApproverMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RequisitionNextApprover>().ToTable(@"vw_RequisitionsContext_RequisitionNextApprovers", @"dbo");
            modelBuilder.Entity<RequisitionNextApprover>().Property<int>(x => x.RequisitionId).HasColumnName(@"RequisitionId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionNextApprover>().Property<int>(x => x.ApproverUserId).HasColumnName(@"ApproverUserId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RequisitionNextApprover>().Property<System.Nullable<int>>(x => x.AlternateApproverUserId).HasColumnName(@"AlternateApproverId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<RequisitionNextApprover>().HasKey(@"RequisitionId");
        }
	
        partial void CustomizeRequisitionNextApproverMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region ReportsToContact Mapping

        private void ReportsToContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ReportsToContact>().ToTable(@"vw_RequisitionsContext_ReportsToContact", @"dbo");
            modelBuilder.Entity<ReportsToContact>().Property<int>(@"RequisitionId").HasColumnName(@"RequisitionId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ReportsToContact>().Property<int>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ReportsToContact>().Property<string>(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<ReportsToContact>().Property<string>(x => x.MiddleInitial).HasColumnName(@"MiddleInitial").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<ReportsToContact>().Property<string>(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(254)").IsRequired().ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<ReportsToContact>().Property<string>(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType(@"nvarchar(254)").ValueGeneratedNever().HasMaxLength(254);
            modelBuilder.Entity<ReportsToContact>().HasKey(@"RequisitionId");
        }
	
        partial void CustomizeReportsToContactMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region ActiveCandidatesCount Mapping

        private void ActiveCandidatesCountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ActiveCandidatesCount>().ToTable(@"vw_RequisitionsContext_ActiveCandidatesCount", @"dbo");
            modelBuilder.Entity<ActiveCandidatesCount>().Property<int>(@"RequisitionId").HasColumnName(@"RequisitionId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ActiveCandidatesCount>().Property<int>(x => x.Count).HasColumnName(@"Count").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ActiveCandidatesCount>().HasKey(@"RequisitionId");
        }
	
        partial void CustomizeActiveCandidatesCountMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region AttachmentsCount Mapping

        private void AttachmentsCountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AttachmentsCount>().ToTable(@"vw_RequisitionsContext_AttachmentsCount", @"dbo");
            modelBuilder.Entity<AttachmentsCount>().Property<int>(@"RequisitionId").HasColumnName(@"RequisitionId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AttachmentsCount>().Property<int>(x => x.Count).HasColumnName(@"Count").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<AttachmentsCount>().HasKey(@"RequisitionId");
        }
	
        partial void CustomizeAttachmentsCountMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region StatusDescription Mapping

        private void StatusDescriptionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StatusDescription>().ToTable(@"vw_RequisitionsContext_StatusDescription", @"dbo");
            modelBuilder.Entity<StatusDescription>().Property<int>(x => x.RequisitionStatusId).HasColumnName(@"RequisitionStatusId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description1).HasColumnName(@"Description1").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description2).HasColumnName(@"Description2").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description3).HasColumnName(@"Description3").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description4).HasColumnName(@"Description4").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description5).HasColumnName(@"Description5").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description6).HasColumnName(@"Description6").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description7).HasColumnName(@"Description7").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().Property<string>(x => x.Description8).HasColumnName(@"Description8").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<StatusDescription>().HasKey(@"RequisitionStatusId");
        }
	
        partial void CustomizeStatusDescriptionMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region Requisition Navigation properties

            modelBuilder.Entity<Requisition>().HasMany(x => x.Projects).WithOne().IsRequired(true).HasForeignKey(@"RequisitionId");
            modelBuilder.Entity<Requisition>().HasMany(x => x.GeneralLedgers).WithOne().IsRequired(true).HasForeignKey(@"RequisitionId");
            modelBuilder.Entity<Requisition>().HasMany(x => x.CostCenters).WithOne().IsRequired(true).HasForeignKey(@"RequisitionId");
            modelBuilder.Entity<Requisition>().HasOne(x => x.ContractTier).WithMany().HasForeignKey(@"ContractTierId");
            modelBuilder.Entity<Requisition>().HasOne(x => x.Location).WithMany().HasForeignKey(@"LocationId");
            modelBuilder.Entity<Requisition>().HasOne(x => x.Organization).WithMany().IsRequired(true).HasForeignKey(@"OrganizationId");
            modelBuilder.Entity<Requisition>().HasMany(x => x.Candidates).WithOne().OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RequisitionId");
            modelBuilder.Entity<Requisition>().HasOne(x => x.OrganizationDetail).WithMany().IsRequired(true).HasPrincipalKey(@"OrganizationId").HasForeignKey(@"OrganizationId");
            modelBuilder.Entity<Requisition>().HasOne(x => x.RequisitionClass).WithMany().HasForeignKey(@"RequisitionClassId");
            modelBuilder.Entity<Requisition>().HasMany(x => x.RequisitionContacts).WithOne().IsRequired(true).HasForeignKey(@"RequisitionId");
            modelBuilder.Entity<Requisition>().HasOne(x => x.ReportsToContact).WithOne().IsRequired(true).HasForeignKey(typeof(ReportsToContact), @"RequisitionId");
            modelBuilder.Entity<Requisition>().HasOne(x => x.ActiveCandidates).WithOne().IsRequired(true).HasForeignKey(typeof(Requisition), @"Id");
            modelBuilder.Entity<Requisition>().HasOne(x => x.Attachments).WithOne().IsRequired(true).HasForeignKey(typeof(Requisition), @"Id");
            modelBuilder.Entity<Requisition>().HasOne(x => x.StatusDescription).WithOne().HasForeignKey(typeof(Requisition), @"RequisitionStatusId");

        #endregion

        #region RequisitionProject Navigation properties


        #endregion

        #region RequisitionGeneralLedger Navigation properties


        #endregion

        #region RequisitionCostCenter Navigation properties


        #endregion

        #region ClientTier Navigation properties


        #endregion

        #region Location Navigation properties


        #endregion

        #region Organization Navigation properties


        #endregion

        #region Candidate Navigation properties


        #endregion

        #region OrganizationDetail Navigation properties


        #endregion

        #region RequisitionClass Navigation properties


        #endregion

        #region RequisitionContact Navigation properties


        #endregion

        #region Approval Navigation properties

            modelBuilder.Entity<Approval>().HasOne(x => x.UserApprovalData).WithOne().IsRequired(true).HasForeignKey(typeof(Approval), @"UserId");

        #endregion

        #region ApprovalProcess Navigation properties

            modelBuilder.Entity<ApprovalProcess>().HasMany(x => x.Approvals).WithOne().IsRequired(true).HasForeignKey(@"ApprovalProcessId");

        #endregion

        #region UserApprovalData Navigation properties


        #endregion

        #region ReportsToContact Navigation properties


        #endregion

        #region ActiveCandidatesCount Navigation properties


        #endregion

        #region AttachmentsCount Navigation properties


        #endregion

        #region StatusDescription Navigation properties


        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
